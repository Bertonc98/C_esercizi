Algoritmo SottovettoreMonotonoMax(Array A[0...n])->(inizio, fine, max)

	sia S vettore delle somme [0...n]
	S[0]<-A[0]
	fine<-0
	max<-S[0]
	i<-1
	first<-false
	dec<-false
	cre<-false
	change<-false


	while(i<=n) Do
		|
		|while(i<=n ANd A[i]<A[i-1]) Do			//caso in cui decresce
		|	|
		|	|if(S[i-1]>0 && change=false)then
		|	|	|_S[i]=S[i-1]+A[i]
		|	|else
		|	|	|_S[i]=A[i]
		|	|
		|	|change<-false
		|	|
		|	|if(S[i]>max) then
		|	|	| fine<-i
		|	|	|_max=S[i]
		|	|i++
		|	|if(A[i]>=A[i-1]) then
		|	|___|_change<-true
		|
		|while(i<=n And A[i]>A[i-1]) Do			//caso in cui cresce
		|	|
		|	|if(S[i-1]>0 && change=false)then
		|	|	|_S[i]=S[i-1]+A[i]
		|	|else
		|	|	|_S[i]=A[i]
		|	|
		|	|change<-false
		|	|
		|	|if(S[i]<max) then
		|	|	| fine<-i
		|	|	|_max=S[i]
		|	|i++
		|	|if(A[i]<=A[i-1]) then
		|	|___|_change<-true
		|	
		|while(i<=n And A[i]=A[i-1]) Do			//mentre resta uguale
		|	|
		|	|if(S[i-1]>0)then
		|	|	|_S[i]=S[i-1]+A[i]
		|	|else
		|	|	|_S[i]=A[i]
		|	|
		|	|
		|	|
		|	|if(S[i]>max) then
		|	|	| fine<-i
		|	|	|_max=S[i]
		|	|i++
		|	|if(A[i]!=A[i-1]) then
		|	|___|_change<-true
		|_____

inizio<-fine
count<-max

while(count!=0)
	|	count<-cunt-A[inizio]
	|___inizio--

Return (inizio, fine, max)